# Config for single device full finetuning in full_finetune_single_device.py
# using a Llama3 8B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3-8B --output-dir /tmp/Meta-Llama-3-8B --hf-token <HF_TOKEN>
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config llama3/8B_full_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config llama3/8B_full_single_device checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.


# Model Arguments
model_orig:
  _component_: torchtune.models.llama3.llama3_8b_prefix

model_layer:
  _component_: torchtune.models.llama3.llama3_8b_single_layer

target_layer: 3

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer_transformers
  path: ./torchtune-llama3-8b-instruct/tokenizer.json

# Checkpointer used only to load the original model.
checkpointer_orig:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: ./torchtune-llama3-8b-instruct/
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  recipe_checkpoint: null
  # output_dir is not meaningful because this checkpointer is never used to
  # save a model.
  output_dir: ./torchtune-llama3-8b-instruct/output/junk/
  model_type: LLAMA3

# Checkpointer for loading and saving the quantized layer.
checkpointer_layer:
  _component_: torchtune.utils.FullModelGGUFCheckpointer
  checkpoint_dir: ./torchtune-llama3-8b-instruct/
  checkpoint_files: [
    ggml-model-Q6_K.gguf
  ]
  recipe_checkpoint: null
  output_dir: ./torchtune-llama3-8b-instruct/output/${target_layer}/
  model_type: LLAMA3

resume_from_checkpoint: False

# Dataset and Sampler
dataset:
  #_component_: torchtune.datasets.slimorca_dataset
  _component_: torchtune.datasets.alpaca_cleaned_dataset
  train_on_input: True
seed: null
shuffle: True
batch_size: 4

# Optimizer and Scheduler
#optimizer:
#  _component_: bitsandbytes.optim.AdamW8bit
#  lr: 2e-5
optimizer:
  _component_: torch.optim.AdamW
#  weight_decay: 0.01
  #lr: 3e-4
  #lr: 2e-8
  lr: 5e-9
#lr_scheduler:
#  _component_: torchtune.modules.get_cosine_schedule_with_warmup
#  num_warmup_steps: 100
lr_scheduler:
  _component_: torchtune.modules.lr_schedulers.get_reduce_lr_on_plateau
  patience: 25
  cooldown: 15
  factor: 0.3
  eps: 0

loss:
  #_component_: torch.nn.CosineEmbeddingLoss
  _component_: torch.nn.MSELoss

# Training
epochs: 1
max_steps_per_epoch: 400
#max_steps_per_epoch: null
gradient_accumulation_steps: 16
optimizer_in_bwd: False
compile: True

# Environment
device: cuda
dtype: fp32
enable_activation_checkpointing: True

# Logging
output_dir: ./torchtune-llama3-8b-instruct/logs/
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
log_every_n_steps: null

# Profiler (disabled)
profiler:
  _component_: torchtune.utils.profiler
  enabled: False
